#include <iostream>
#include <vector>
#include <omp.h>
#include <chrono>

using namespace std;

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    bool swapped;

    for (int i = 0; i < n - 1; i++) {
        swapped = false;

        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }

        if (!swapped)
            break;
    }
}

void parallelBubbleSort(vector<int>& arr) {
    int n = arr.size();
    bool swapped;

    #pragma omp parallel
    {
        for (int i = 0; i < n - 1; i++) {
            swapped = false;

            #pragma omp for
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr[j], arr[j + 1]);
                    swapped = true;
                }
            }

            #pragma omp barrier

            if (!swapped)
                break;
        }
    }
}

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> leftArr(n1), rightArr(n2);

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void parallelMergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, left, mid);

            #pragma omp section
            parallelMergeSort(arr, mid + 1, right);
        }

        merge(arr, left, mid, right);
    }
}

int main() {
    vector<int> bubbleSortArr = {66, 42, 19, 83, 98, 48, 36, 71, 88, 63, 87, 93, 24, 8, 14, 28, 7, 94, 45, 79, 96, 77, 26, 33, 85, 11, 13, 52, 39, 76, 21, 91, 3, 31, 80, 72, 65, 97, 56, 23, 38, 15, 5, 67, 32, 49, 50, 55, 75, 95, 90, 10, 84, 18, 37, 89, 16, 73, 99, 70, 61, 46, 69, 68, 12, 35, 20, 59, 81, 17, 40, 53, 27, 62, 54, 92, 34, 47, 41, 74, 78, 25, 2, 6, 22, 30, 86, 9, 29, 82, 60, 57, 4, 64, 43, 1, 51, 58, 44, 100};
    vector<int> mergeSortArr = {66, 42, 19, 83, 98, 48, 36, 71, 88, 63, 87, 93, 24, 8, 14, 28, 7, 94, 45, 79, 96, 77, 26, 33, 85, 11, 13, 52, 39, 76, 21, 91, 3, 31, 80, 72, 65, 97, 56, 23, 38, 15, 5, 67, 32, 49, 50, 55, 75, 95, 90, 10, 84, 18, 37, 89, 16, 73, 99, 70, 61, 46, 69, 68, 12, 35, 20, 59, 81, 17, 40, 53, 27, 62, 54, 92, 34, 47, 41, 74, 78, 25, 2, 6, 22, 30, 86, 9, 29, 82, 60, 57, 4, 64, 43, 1, 51, 58, 44, 100};

    // Measure time for normal bubble sort
    auto start = chrono::high_resolution_clock::now();
    bubbleSort(bubbleSortArr);
    auto end = chrono::high_resolution_clock::now();

    // Print sorted array for normal bubble sort
    cout << "Sorted array: ";
    for (int num : bubbleSortArr) {
        cout << num << " ";
    }
    cout << endl;
    cout << endl;

    // Calculate and print time for normal bubble sort
    auto durationNormal = chrono::duration_cast<chrono::microseconds>(end - start);
    cout << "Time for normal bubble sort: " << durationNormal.count() << " microseconds" << endl;

    // Reset the array
    bubbleSortArr = {66, 42, 19, 83, 98, 48, 36, 71, 88, 63, 87, 93, 24, 8, 14, 28, 7, 94, 45, 79, 96, 77, 26, 33, 85, 11, 13, 52, 39, 76, 21, 91, 3, 31, 80, 72, 65, 97, 56, 23, 38, 15, 5, 67, 32, 49, 50, 55, 75, 95, 90, 10, 84, 18, 37, 89, 16, 73, 99, 70, 61, 46, 69, 68, 12, 35, 20, 59, 81, 17, 40, 53, 27, 62, 54, 92, 34, 47, 41, 74, 78, 25, 2, 6, 22, 30, 86, 9, 29, 82, 60, 57, 4, 64, 43, 1, 51, 58, 44, 100};

    // Measure time for parallel bubble sort
    start = chrono::high_resolution_clock::now();
    parallelBubbleSort(bubbleSortArr);
    end = chrono::high_resolution_clock::now();


    // Calculate and print time for parallel bubble sort
    auto durationParallelBubble = chrono::duration_cast<chrono::microseconds>(end - start);
    cout << "Time for parallel bubble sort: " << durationParallelBubble.count() << " microseconds" << endl;

    // Measure time for parallel merge sort
    start = chrono::high_resolution_clock::now();
    parallelMergeSort(mergeSortArr, 0, mergeSortArr.size() - 1);
    end = chrono::high_resolution_clock::now();


    // Calculate and print time for parallel merge sort
    auto durationParallelMerge = chrono::duration_cast<chrono::microseconds>(end - start);
    cout << "Time for parallel merge sort: " << durationParallelMerge.count() << " microseconds" << endl;

    return 0;
}
